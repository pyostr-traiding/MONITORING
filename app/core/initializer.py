import logging

import aiohttp
import asyncio

from API.orders import api_get_list_orders
from API.position import api_get_list_positions

DEFAULT_TIMEOUT = aiohttp.ClientTimeout(total=15)

logger = logging.getLogger(__name__)


async def process_positions_data(data_list: list[dict]) -> list[dict]:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–π"""
    processed = []
    for item in data_list:
        if item.get("status") in ["cancel", "completed"]:
            continue
        processed.append(item)
    logger.info(f"[InitLoader] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(processed)} –∏–∑ {len(data_list)}")
    return processed


async def process_orders_data(data_list: list[dict]) -> list[dict]:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
    processed = []
    for item in data_list:
        if item.get("status") in ["cancel", "completed"]:
            continue
        item["full_symbol"] = f"{item.get('symbol', '').upper()}_{item.get('side', '').upper()}"
        processed.append(item)
    logger.info(f"[InitLoader] –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(processed)} –∏–∑ {len(data_list)}")
    return processed


# === üß© –ö–õ–ê–°–° –ó–ê–ì–†–£–ó–ß–ò–ö–ê ===

class InitialDataLoader:
    """
    –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å API –≤ handlers.
    –¢–∞–π–º–∞—É—Ç—ã + –º—è–≥–∫–∏–µ –æ—à–∏–±–∫–∏.
    """
    def __init__(self, base_url: str, handlers: list):
        self.base_url = base_url.rstrip("/")
        self.handlers = handlers

    async def _process_data(self, handler, data_list: list[dict]):
        """–ü–µ—Ä–µ–¥–∞—ë—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ö–µ–Ω–¥–ª–µ—Ä"""
        for item in data_list:
            await handler.add_message(None, item)

    async def load_all(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º"""
        tasks = []
        for handler in self.handlers:
            if handler.queue_name == "queue_monitoring_position":
                tasks.append(self._load_positions(handler))
            elif handler.queue_name == "queue_monitoring_order":
                tasks.append(self._load_orders(handler))
        await asyncio.gather(*tasks)

    async def _load_positions(self, handler):
        data = await api_get_list_positions()
        if not data:
            return
        processed = await process_positions_data(data)
        await self._process_data(handler, processed)

    async def _load_orders(self, handler):
        data = await api_get_list_orders()
        if not data:
            return
        processed = await process_orders_data(data)
        await self._process_data(handler, processed)