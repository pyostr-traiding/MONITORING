# app/core/redis_listener.py
import json
import asyncio
import time
from typing import Callable, Dict, List
import redis.asyncio as aioredis


class RedisListener:
    def __init__(self, config: dict, channels: List[str], handlers: List, reconnect_delay: float = 2.0):
        self.config = config
        self.channels = channels
        self.handlers = handlers  # üîπ –¥–æ–±–∞–≤–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
        self.callbacks: Dict[str, List[Callable]] = {}
        self.redis: aioredis.Redis | None = None
        self.pubsub: aioredis.client.PubSub | None = None
        self.reconnect_delay = reconnect_delay
        self._stop = asyncio.Event()
        self._last_call: Dict[str, float] = {}  # debounce

    def register_callback(self, channel: str, callback: Callable):
        if channel not in self.callbacks:
            self.callbacks[channel] = []
        self.callbacks[channel].append(callback)

    async def _queues_empty(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –æ—á–µ—Ä–µ–¥–∏ –ø—É—Å—Ç—ã–µ"""
        for h in self.handlers:
            if h.messages:  # –ª–æ–∫–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –Ω–µ –ø—É—Å—Ç–∞
                return False
        return True

    async def start(self):
        while not self._stop.is_set():
            try:
                self.redis = aioredis.Redis(**self.config, decode_responses=True)
                self.pubsub = self.redis.pubsub()
                await self.pubsub.subscribe(*self.channels)
                print(f"[Redis] –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª—ã: {self.channels}")

                async for raw in self.pubsub.listen():
                    if self._stop.is_set():
                        break
                    if raw["type"] != "message":
                        continue

                    # üí° –ï—Å–ª–∏ –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏ –ø—É—Å—Ç—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
                    if await self._queues_empty():
                        # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑ –≤ N –º–∏–Ω—É—Ç)
                        continue

                    channel = raw["channel"]
                    try:
                        data = json.loads(raw["data"])
                    except Exception:
                        data = raw["data"]

                    # üîπ 1. —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É —Å–≤–µ—á–∏
                    interval = data.get("interval") if isinstance(data, dict) else None
                    if interval and interval != "1m":
                        continue  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º 5m, 15m, 30m

                    # üîπ 2. debounce: –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 3 —Å–µ–∫—É–Ω–¥—ã
                    now = time.monotonic()
                    last = self._last_call.get(channel, 0)
                    if now - last < 3:
                        continue
                    self._last_call[channel] = now

                    # üîπ 3. –∑–∞–ø—É—Å–∫ callback'–æ–≤ (–≤ —Ñ–æ–Ω–µ)
                    for cb in self.callbacks.get(channel, []):
                        asyncio.create_task(cb(data))
            except Exception as e:
                print(f"[Redis] listen error: {e} ‚Üí reconnect in {self.reconnect_delay}s")
                await asyncio.sleep(self.reconnect_delay)
            finally:
                try:
                    if self.pubsub:
                        await self.pubsub.aclose()
                except Exception:
                    pass
                try:
                    if self.redis:
                        await self.redis.aclose()
                except Exception:
                    pass

    async def stop(self):
        self._stop.set()
