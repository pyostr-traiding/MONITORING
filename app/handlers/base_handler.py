import asyncio
import json

class BaseHandler:
    def __init__(self):
        self.messages: list[dict] = []  # –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.lock = asyncio.Lock()
        self.queue_name = None

    def __len__(self):
        return len(self.messages)

    async def add_message(self, msg, body):
        """–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å (RabbitMQ msg, JSON body)"""
        async with self.lock:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON ‚Üí dict (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if isinstance(body, str):
                try:
                    body = json.loads(body)
                except json.JSONDecodeError:
                    pass

            uuid = (body or {}).get("uuid")
            if uuid:
                # üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ uuid –≤ –æ—á–µ—Ä–µ–¥–∏
                if any(m["body"].get("uuid") == uuid for m in self.messages):
                    print(f"[Handler:{self.__class__.__name__}] üîÅ –ü—Ä–æ–ø—É—Å–∫–∞—é –¥—É–±–ª–∏–∫–∞—Ç uuid={uuid}")
                    if msg:
                        await msg.ack()  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª–æ –≤ Rabbit
                    return

            # üî∏ –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å
            self.messages.append({"msg": msg, "body": body})
            print(f"[Handler:{self.__class__.__name__}] –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {body}")

            # üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º RabbitMQ, –µ—Å–ª–∏ –µ—Å—Ç—å msg
            if msg:
                await msg.ack()

    async def get_messages(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        async with self.lock:
            return list(self.messages)

    async def next_message(self):
        """–ë–µ—Ä—ë–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (FIFO)"""
        async with self.lock:
            if not self.messages:
                return None
            return self.messages.pop(0)

    async def requeue_message(self, item):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏"""
        async with self.lock:
            self.messages.append(item)

    async def remove_message(self, item):
        """–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        async with self.lock:
            try:
                self.messages.remove(item)
            except ValueError:
                pass
